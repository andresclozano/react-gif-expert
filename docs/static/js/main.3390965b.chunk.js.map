{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","img","className","src","url","alt","title","getGifs","category","a","fetch","resp","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","c","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4LAmCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,MAAI,CAACP,MACvBC,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aCGhBG,EATK,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACnB,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAIG,IAAMC,IAAMJ,EAAIK,QAC/B,4BAAKL,EAAIK,Y,uBCNRC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbL,EADa,gDACkCI,EADlC,8DAEAE,MAAMN,GAFN,cAEbO,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAd,GAAQ,IAAD,EACzB,MAAO,CACHe,GAAKf,EAAIe,GACTV,MAAQL,EAAIK,MACZF,IAAG,UAAGH,EAAIgB,cAAP,aAAG,EAAYC,iBAAiBd,QATxB,kBAaZU,GAbY,4CAAH,sDC8BLK,EAzBC,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAEf,ECJwB,SAACA,GAEzB,MAA0BrB,mBAAS,CAC/B0B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNhB,EAAQC,GACHgB,MAAK,SAAAC,GAAI,OACNH,EAAS,CACLT,KAAOY,EACPL,SAAS,SAGtB,CAACZ,IAEGa,EDbmBK,CAAalB,GAA/BY,EAAR,EAAQA,QAASP,EAAjB,EAAiBA,KAEjB,OACI,qCACI,oBAAIX,UAAU,oCAAd,SAAmDM,IACjDY,GAAW,mBAAGlB,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEQW,EAAKE,KAAI,SAAAd,GAAG,OACR,cAAC,EAAD,CAEIA,IAAKA,GADAA,EAAIe,aEQtBW,EArBM,WAEjB,MAAoCxC,mBAAS,CAAC,WAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACO0C,EAAWb,KAAI,SAAAc,GAAC,OACf,cAAC,EAAD,CAEIrB,SAAUqB,GADLA,YCJdC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.3390965b.chunk.js","sourcesContent":["import React, { useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2){            \r\n            setCategories(cats => [inputValue])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}                \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","import React from 'react'\r\n\r\nconst GifGridItem = ({ img }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ img.url } alt={ img.title }/>\r\n            <p>{ img.title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem ","export const getGifs = async(category) => {\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${category}&limit=5&api_key=hW7RZNI5eJOZkKZdu3cwdsBVWAkzndqX`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id : img.id,\r\n            title : img.title,\r\n            url : img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { loading, data } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading ...</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data.map(img => \r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            img={img}/>\r\n                    ) \r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid;\r\n","import {useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => \r\n                setState({\r\n                    data : imgs,\r\n                    loading: false\r\n                })\r\n            )\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Naruto'])\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>  \r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n                {  categories.map(c => (\r\n                    <GifGrid \r\n                        key={c} \r\n                        category={c}/>\r\n                )) }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}